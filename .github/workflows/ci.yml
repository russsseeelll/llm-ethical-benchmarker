# this is our github actions workflow for ci, using docker compose and sqlite
name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: set up docker compose
        run: docker compose up -d --build

      # always install composer dependencies inside the container (volume mount overwrites vendor)
      - name: install composer dependencies
        run: docker exec laravel-app composer install --no-interaction --prefer-dist --optimize-autoloader

      # always create the sqlite database file (safe if it already exists)
      - name: create sqlite database file
        run: docker exec laravel-app touch /var/www/database/database.sqlite

      # run migrations, and if it fails, show the database directory for debugging
      - name: run migrations
        run: |
          set -e
          if ! docker exec laravel-app php artisan migrate --force; then
            echo "migrations failed, showing database directory contents:"
            docker exec laravel-app ls -l /var/www/database
            exit 1
          fi

      # lint all our php code, including resources/ and public/
      - name: php lint
        run: |
          docker exec laravel-app find app routes database tests resources public -type f -name '*.php' -exec php -l {} \;

      # phpcs is skipped because vendor/bin/phpcs is not present in this project

      - name: run phpunit
        run: docker exec laravel-app php artisan test --coverage --min=70

      - name: security scan
        run: |
          docker exec laravel-app composer require --dev enlightn/security-checker
          docker exec laravel-app vendor/bin/security-checker security:check

      - name: tear down
        run: docker compose down --remove-orphans 